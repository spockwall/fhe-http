SerializedData = list[int]

class Fhe:
    def __init__(self) -> None: ...
    def encrypt(self, val: SerializedData) -> SerializedData: ...
    def decrypt(self, val: SerializedData) -> SerializedData: ...

class FheTypes:
    def __init__(self) -> None: ...
    def from_i64(self, value: int) -> SerializedData: ...
    def from_u64(self, value: int) -> SerializedData: ...
    def from_string(self, value: str) -> SerializedData: ...
    def to_i64(self, value: SerializedData) -> int: ...
    def to_u64(self, value: SerializedData) -> int: ...
    def to_string(self, value: SerializedData) -> str: ...

class FheOps:
    def __init__(self) -> None: ...
    def set_server_key(self, server_key: list[int]) -> None: ...
    def add(self, a: SerializedData, b: SerializedData, data_type: str): ...
    def sub(self, a: SerializedData, b: SerializedData, data_type: str): ...
    def mul(self, a: SerializedData, b: SerializedData, data_type: str): ...

class KeyGenerator:
    client_key: SerializedData
    server_key: SerializedData
    __config: any
    def __init__(self) -> None: ...
    def init_keys(self): ...
    def generate_new_keys(self): ...
    def get_client_key(self) -> SerializedData: ...
    def get_server_key(self) -> SerializedData: ...
    def __get_enc_path(self) -> str: ...
    def save_keys(self): ...
    def load_keys(self): ...
